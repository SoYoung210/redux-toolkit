/*! For license information please see 7c3d1ea4.3310fd55.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(1),r=(n(119),n(118));const i={id:"usage-with-typescript",title:"Usage With TypeScript",sidebar_label:"Usage With TypeScript",hide_title:!0},o={id:"usage/usage-with-typescript",title:"Usage With TypeScript",description:"# Usage With TypeScript",source:"@site/../docs/usage/usage-with-typescript.md",permalink:"/redux-toolkit/usage/usage-with-typescript",sidebar_label:"Usage With TypeScript",sidebar:"docs",previous:{title:"Usage Guide",permalink:"/redux-toolkit/usage/usage-guide"},next:{title:"configureStore",permalink:"/redux-toolkit/api/configureStore"}},c=[{value:"Using <code>configureStore</code> with TypeScript",id:"using-configurestore-with-typescript",children:[{value:"Getting the <code>State</code> type",id:"getting-the-state-type",children:[]},{value:"Getting the <code>Dispatch</code> type",id:"getting-the-dispatch-type",children:[]},{value:"Correct typings for the <code>Dispatch</code> type",id:"correct-typings-for-the-dispatch-type",children:[]},{value:"Using the extracted <code>Dispatch</code> type with React-Redux",id:"using-the-extracted-dispatch-type-with-react-redux",children:[]}]},{value:"<code>createAction</code>",id:"createaction",children:[{value:"Alternative to using a literally-typed <code>action.type</code>",id:"alternative-to-using-a-literally-typed-actiontype",children:[]}]},{value:"<code>createReducer</code>",id:"createreducer",children:[{value:"Building Type-Safe Reducer Argument Objects",id:"building-type-safe-reducer-argument-objects",children:[]}]},{value:"<code>createSlice</code>",id:"createslice",children:[{value:"Defining the Initial State Type",id:"defining-the-initial-state-type",children:[]},{value:"Defining Action Contents with <code>prepare</code> Callbacks",id:"defining-action-contents-with-prepare-callbacks",children:[]},{value:"Generated Action Types for Slices",id:"generated-action-types-for-slices",children:[]},{value:"Type safety with <code>extraReducers</code>",id:"type-safety-with-extrareducers",children:[]},{value:"Wrapping <code>createSlice</code>",id:"wrapping-createslice",children:[]}]},{value:"<code>createAsyncThunk</code>",id:"createasyncthunk",children:[]},{value:"<code>createEntityAdapter</code>",id:"createentityadapter",children:[{value:"Using <code>createEntityAdapter</code> with <code>normalizr</code>",id:"using-createentityadapter-with-normalizr",children:[]}]}],s={rightToc:c};function l({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"usage-with-typescript"},"Usage With TypeScript"),Object(r.b)("p",null,"Redux Toolkit is written in TypeScript, and its API is designed to enable great integration with TypeScript applications."),Object(r.b)("p",null,"This page is intended to give an overview of all common usecases and the most probable pitfalls you might encounter when using RTK with TypeScript."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"If you encounter any problems with the types that are not described on this page, please open an issue for discussion.")),Object(r.b)("h2",{id:"using-configurestore-with-typescript"},"Using ",Object(r.b)("inlineCode",{parentName:"h2"},"configureStore")," with TypeScript"),Object(r.b)("p",null,"Using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/api/configureStore"}),"configureStore")," should not need any additional typings. You might, however, want to extract the ",Object(r.b)("inlineCode",{parentName:"p"},"RootState")," type and the ",Object(r.b)("inlineCode",{parentName:"p"},"Dispatch")," type."),Object(r.b)("h3",{id:"getting-the-state-type"},"Getting the ",Object(r.b)("inlineCode",{parentName:"h3"},"State")," type"),Object(r.b)("p",null,"The easiest way of getting the ",Object(r.b)("inlineCode",{parentName:"p"},"State")," type is to define the root reducer in advance and extract its ",Object(r.b)("inlineCode",{parentName:"p"},"ReturnType"),".",Object(r.b)("br",{parentName:"p"}),"\n","It is recommend to give the type a different name like ",Object(r.b)("inlineCode",{parentName:"p"},"RootState")," to prevent confusion, as the type name ",Object(r.b)("inlineCode",{parentName:"p"},"State")," is usually overused."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"{3}","{3}":!0}),"import { combineReducers } from '@reduxjs/toolkit'\nconst rootReducer = combineReducers({})\nexport type RootState = ReturnType<typeof rootReducer>\n")),Object(r.b)("h3",{id:"getting-the-dispatch-type"},"Getting the ",Object(r.b)("inlineCode",{parentName:"h3"},"Dispatch")," type"),Object(r.b)("p",null,"If you want to get the ",Object(r.b)("inlineCode",{parentName:"p"},"Dispatch")," type from your store, you can extract it after creating the store.",Object(r.b)("br",{parentName:"p"}),"\n","It is recommend to give the type a different name like ",Object(r.b)("inlineCode",{parentName:"p"},"AppDispatch")," to prevent confusion, as the type name ",Object(r.b)("inlineCode",{parentName:"p"},"Dispatch")," is usually overused."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"{6}","{6}":!0}),"import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './rootReducer'\nconst store = configureStore({\n  reducer: rootReducer\n})\nexport type AppDispatch = typeof store.dispatch\n")),Object(r.b)("h3",{id:"correct-typings-for-the-dispatch-type"},"Correct typings for the ",Object(r.b)("inlineCode",{parentName:"h3"},"Dispatch")," type"),Object(r.b)("p",null,"The type of the ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," function type will be directly inferred from the ",Object(r.b)("inlineCode",{parentName:"p"},"middleware")," option. So if you add ",Object(r.b)("em",{parentName:"p"},"correctly typed")," middlewares, ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," should already be correctly typed."),Object(r.b)("p",null,"There might however be cases, where TypeScript decides to simplify your provided middleware array down to just ",Object(r.b)("inlineCode",{parentName:"p"},"Array<Middleware>"),". In that case, you have to either specify the array type manually as a tuple, or in TS versions >= 3.4, just add ",Object(r.b)("inlineCode",{parentName:"p"},"as const")," to your definition."),Object(r.b)("p",null,"Please note that when calling ",Object(r.b)("inlineCode",{parentName:"p"},"getDefaultMiddleware")," in TypeScript, you have to provide the state type as a generic argument."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{10-20}","{10-20}":!0}),"import { configureStore } from '@reduxjs/toolkit'\nimport additionalMiddleware from 'additional-middleware'\n// @ts-ignore\nimport untypedMiddleware from 'untyped-middleware'\nimport rootReducer from './rootReducer'\n\ntype RootState = ReturnType<typeof rootReducer>\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [\n    // getDefaultMiddleware needs to be called with the state type\n    ...getDefaultMiddleware<RootState>(),\n    // correctly typed middlewares can just be used\n    additionalMiddleware,\n    // you can also manually type middlewares manually\n    untypedMiddleware as Middleware<\n      (action: Action<'specialAction'>) => number,\n      RootState\n    >\n  ] as const // prevent this from becoming just `Array<Middleware>`\n})\n\ntype AppDispatch = typeof store.dispatch\n")),Object(r.b)("p",null,"If you need any additional reference or examples, ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/reduxjs/redux-toolkit/blob/master/type-tests/files/configureStore.typetest.ts"}),"the type tests for ",Object(r.b)("inlineCode",{parentName:"a"},"configureStore"))," contain many different scenarios on how to type this."),Object(r.b)("h3",{id:"using-the-extracted-dispatch-type-with-react-redux"},"Using the extracted ",Object(r.b)("inlineCode",{parentName:"h3"},"Dispatch")," type with React-Redux"),Object(r.b)("p",null,"By default, the React-Redux ",Object(r.b)("inlineCode",{parentName:"p"},"useDispatch")," hook does not contain any types that take middlewares into account. If you need a more specific type for the ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," function when dispatching, you may specify the type of the returned ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," function, or create a custom-typed version of ",Object(r.b)("inlineCode",{parentName:"p"},"useSelector"),". See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://react-redux.js.org/using-react-redux/static-typing#typing-the-usedispatch-hook"}),"the React-Redux documentation")," for details."),Object(r.b)("h2",{id:"createaction"},Object(r.b)("inlineCode",{parentName:"h2"},"createAction")),Object(r.b)("p",null,"For most use cases, there is no need to have a literal definition of ",Object(r.b)("inlineCode",{parentName:"p"},"action.type"),", so the following can be used:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"createAction<number>('test')\n")),Object(r.b)("p",null,"This will result in the created action being of type ",Object(r.b)("inlineCode",{parentName:"p"},"PayloadActionCreator<number, string>"),"."),Object(r.b)("p",null,"In some setups, you will need a literal type for ",Object(r.b)("inlineCode",{parentName:"p"},"action.type"),", though.\nUnfortunately, TypeScript type definitions do not allow for a mix of manually-defined and inferred type parameters, so you'll have to specify the ",Object(r.b)("inlineCode",{parentName:"p"},"type")," both in the Generic definition as well as in the actual JavaScript code:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"createAction<number, 'test'>('test')\n")),Object(r.b)("p",null,"If you are looking for an alternate way of writing this without the duplication, you can use a prepare callback so that both type parameters can be inferred from arguments, removing the need to specify the action type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"function withPayloadType<T>() {\n  return (t: T) => ({ payload: t })\n}\ncreateAction('test', withPayloadType<string>())\n")),Object(r.b)("h3",{id:"alternative-to-using-a-literally-typed-actiontype"},"Alternative to using a literally-typed ",Object(r.b)("inlineCode",{parentName:"h3"},"action.type")),Object(r.b)("p",null,"If you are using ",Object(r.b)("inlineCode",{parentName:"p"},"action.type")," as a discriminator on a discriminated union, for example to correctly type your payload in ",Object(r.b)("inlineCode",{parentName:"p"},"case")," statements, you might be interested in this alternative:"),Object(r.b)("p",null,"Created action creators have a ",Object(r.b)("inlineCode",{parentName:"p"},"match")," method that acts as a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates"}),"type predicate"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const increment = createAction<number>('increment')\nfunction test(action: Action) {\n  if (increment.match(action)) {\n    // action.payload inferred correctly here\n    action.payload\n  }\n}\n")),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"match")," method is also very useful in combination with ",Object(r.b)("inlineCode",{parentName:"p"},"redux-observable")," and RxJS's ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," method."),Object(r.b)("h2",{id:"createreducer"},Object(r.b)("inlineCode",{parentName:"h2"},"createReducer")),Object(r.b)("p",null,"The default way of calling ",Object(r.b)("inlineCode",{parentName:"p"},"createReducer"),' would be with a "lookup table" / "map object", like this:'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"createReducer(0, {\n  increment: (state, action: PayloadAction<number>) => state + action.payload\n})\n")),Object(r.b)("p",null,"Unfortunately, as the keys are only strings, using that API TypeScript can neither infer nor validate the action types for you:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"{\n  const increment = createAction<number, 'increment'>('increment')\n  const decrement = createAction<number, 'decrement'>('decrement')\n  createReducer(0, {\n    [increment.type]: (state, action) => {\n      // action is any here\n    },\n    [decrement.type]: (state, action: PayloadAction<string>) => {\n      // even though action should actually be PayloadAction<number>, TypeScript can't detect that and won't give a warning here.\n    }\n  })\n}\n")),Object(r.b)("p",null,"As an alternative, RTK includes a type-safe reducer builder API."),Object(r.b)("h3",{id:"building-type-safe-reducer-argument-objects"},"Building Type-Safe Reducer Argument Objects"),Object(r.b)("p",null,"Instead of using a simple object as an argument to ",Object(r.b)("inlineCode",{parentName:"p"},"createReducer"),", you can also use a callback that receives a ",Object(r.b)("inlineCode",{parentName:"p"},"ActionReducerMapBuilder")," instance:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"{3-10}","{3-10}":!0}),"const increment = createAction<number, 'increment'>('increment')\nconst decrement = createAction<number, 'decrement'>('decrement')\ncreateReducer(0, builder =>\n  builder\n    .addCase(increment, (state, action) => {\n      // action is inferred correctly here\n    })\n    .addCase(decrement, (state, action: PayloadAction<string>) => {\n      // this would error out\n    })\n)\n")),Object(r.b)("p",null,"We recommend using this API if stricter type safety is necessary when defining reducer argument objects."),Object(r.b)("h2",{id:"createslice"},Object(r.b)("inlineCode",{parentName:"h2"},"createSlice")),Object(r.b)("p",null,"As ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice")," creates your actions as well as your reducer for you, you don't have to worry about type safety here.\nAction types can just be provided inline:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"{\n  const slice = createSlice({\n    name: 'test',\n    initialState: 0,\n    reducers: {\n      increment: (state, action: PayloadAction<number>) =>\n        state + action.payload\n    }\n  })\n  // now available:\n  slice.actions.increment(2)\n  // also available:\n  slice.caseReducers.increment(0, { type: 'increment', payload: 5 })\n}\n")),Object(r.b)("p",null,"If you have too many reducers and defining them inline would be messy, you can also define them outside the ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice")," call and type them as ",Object(r.b)("inlineCode",{parentName:"p"},"CaseReducer"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"type State = number\nconst increment: CaseReducer<State, PayloadAction<number>> = (state, action) =>\n  state + action.payload\n\ncreateSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    increment\n  }\n})\n")),Object(r.b)("h3",{id:"defining-the-initial-state-type"},"Defining the Initial State Type"),Object(r.b)("p",null,"You might have noticed that it is not a good idea to pass your ",Object(r.b)("inlineCode",{parentName:"p"},"SliceState")," type as a generic to ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice"),". This is due to the fact that in almost all cases, follow-up generic parameters to ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice"),' need to be inferred, and TypeScript cannot mix explicit declaration and inference of generic types within the same "generic block".'),Object(r.b)("p",null,"The standard approach is to declare an interface or type for your state, create an initial state value that uses that type, and pass the initial state value to ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice. You can also use the construct"),"initialState: myInitialState as SliceState`."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{1,4,8,15}","{1,4,8,15}":!0}),"type SliceState = { state: 'loading' } | { state: 'finished'; data: string }\n\n// First approach: define the initial state using that type\nconst initialState: SliceState = { state: 'loading' }\n\ncreateSlice({\n  name: 'test1',\n  initialState, // type SliceState is inferred for the state of the slice\n  reducers: {}\n})\n\n// Or, cast the initial state as necessary\ncreateSlice({\n  name: 'test2',\n  initialState: { state: 'loading' } as SliceState,\n  reducers: {}\n})\n")),Object(r.b)("p",null,"which will result in a ",Object(r.b)("inlineCode",{parentName:"p"},"Slice<SliceState, ...>"),"."),Object(r.b)("h3",{id:"defining-action-contents-with-prepare-callbacks"},"Defining Action Contents with ",Object(r.b)("inlineCode",{parentName:"h3"},"prepare")," Callbacks"),Object(r.b)("p",null,"If you want to add a ",Object(r.b)("inlineCode",{parentName:"p"},"meta")," or ",Object(r.b)("inlineCode",{parentName:"p"},"error")," property to your action, or customize the ",Object(r.b)("inlineCode",{parentName:"p"},"payload")," of your action, you have to use the ",Object(r.b)("inlineCode",{parentName:"p"},"prepare")," notation."),Object(r.b)("p",null,"Using this notation with TypeScript looks like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{5-16}","{5-16}":!0}),"const blogSlice = createSlice({\n  name: 'blogData',\n  initialState,\n  reducers: {\n    receivedAll: {\n      reducer(\n        state,\n        action: PayloadAction<Page[], string, { currentPage: number }>\n      ) {\n        state.all = action.payload\n        state.meta = action.meta\n      },\n      prepare(payload: Page[], currentPage: number) {\n        return { payload, meta: { currentPage } }\n      }\n    }\n  }\n})\n")),Object(r.b)("h3",{id:"generated-action-types-for-slices"},"Generated Action Types for Slices"),Object(r.b)("p",null,"As TS cannot combine two string literals (",Object(r.b)("inlineCode",{parentName:"p"},"slice.name")," and the key of ",Object(r.b)("inlineCode",{parentName:"p"},"actionMap"),") into a new literal, all actionCreators created by ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice")," are of type 'string'. This is usually not a problem, as these types are only rarely used as literals."),Object(r.b)("p",null,"In most cases that ",Object(r.b)("inlineCode",{parentName:"p"},"type")," would be required as a literal, the ",Object(r.b)("inlineCode",{parentName:"p"},"slice.action.myAction.match")," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates"}),"type predicate")," should be a viable alternative:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{10}","{10}":!0}),"const slice = createSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    increment: (state, action: PayloadAction<number>) => state + action.payload\n  }\n})\n\nfunction myCustomMiddleware(action: Action) {\n  if (slice.actions.increment.match(action)) {\n    // `action` is narrowed down to the type `PayloadAction<number>` here.\n  }\n}\n")),Object(r.b)("p",null,"If you actually ",Object(r.b)("em",{parentName:"p"},"need")," that type, unfortunately there is no other way than manual casting."),Object(r.b)("h3",{id:"type-safety-with-extrareducers"},"Type safety with ",Object(r.b)("inlineCode",{parentName:"h3"},"extraReducers")),Object(r.b)("p",null,"Reducer lookup tables that map an action ",Object(r.b)("inlineCode",{parentName:"p"},"type")," string to a reducer function are not easy to fully type correctly. This affects both ",Object(r.b)("inlineCode",{parentName:"p"},"createReducer")," and the ",Object(r.b)("inlineCode",{parentName:"p"},"extraReducers")," argument for ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice"),". So, like with ",Object(r.b)("inlineCode",{parentName:"p"},"createReducer"),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#building-type-safe-reducer-argument-objects"}),'you may also use the "builder callback" approach')," for defining the reducer object argument."),Object(r.b)("p",null,"This is particularly useful when a slice reducer needs to handle action types generated by other slices, or generated by specific calls to ",Object(r.b)("inlineCode",{parentName:"p"},"createAction")," (such as the actions generated by ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/api/createAsyncThunk"}),Object(r.b)("inlineCode",{parentName:"a"},"createAsyncThunk")),")."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{27-30}","{27-30}":!0}),"const fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  // if you type your function argument here\n  async (userId: number) => {\n    const response = await fetch(`https://reqres.in/api/users/${userId}`)\n    return (await response.json()) as Returned\n  }\n)\n\ninterface UsersState {\n  entities: []\n  loading: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState: UsersState = {\n  entities: [],\n  loading: 'idle'\n}\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // fill in primary logic here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUserById.pending, (state, action) => {\n      // both `state` and `action` are now correctly typed\n      // based on the slice state and the `pending` action creator\n    })\n  }\n})\n")),Object(r.b)("h3",{id:"wrapping-createslice"},"Wrapping ",Object(r.b)("inlineCode",{parentName:"h3"},"createSlice")),Object(r.b)("p",null,"If you need to reuse reducer logic, it is common to write ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/recipes/structuring-reducers/reusing-reducer-logic#customizing-behavior-with-higher-order-reducers"}),'"higher-order reducers"')," that wrap a reducer function with additional common behavior. This can be done with ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice")," as well, but due to the complexity of the types for ",Object(r.b)("inlineCode",{parentName:"p"},"createSlice"),", you have to use the ",Object(r.b)("inlineCode",{parentName:"p"},"SliceCaseReducers")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ValidateSliceCaseReducers")," types in a very specific way."),Object(r.b)("p",null,'Here is an example of such a "generic" wrapped ',Object(r.b)("inlineCode",{parentName:"p"},"createSlice")," call:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface GenericState<T> {\n  data?: T\n  status: 'loading' | 'finished' | 'error'\n}\n\nconst createGenericSlice = <\n  T,\n  Reducers extends SliceCaseReducers<GenericState<T>>\n>({\n  name = '',\n  initialState,\n  reducers\n}: {\n  name: string\n  initialState: GenericState<T>\n  reducers: ValidateSliceCaseReducers<GenericState<T>, Reducers>\n}) => {\n  return createSlice({\n    name,\n    initialState,\n    reducers: {\n      start(state) {\n        state.status = 'loading'\n      },\n      /**\n       * If you want to write to values of the state that depend on the generic\n       * (in this case: `state.data`, which is T), you might need to specify the\n       * State type manually here, as it defaults to `Draft<GenericState<T>>`,\n       * which can sometimes be problematic with yet-unresolved generics.\n       * This is a general problem when working with immer's Draft type and generics.\n       */\n      success(state: GenericState<T>, action: PayloadAction<T>) {\n        state.data = action.payload\n        state.status = 'finished'\n      },\n      ...reducers\n    }\n  })\n}\n\nconst wrappedSlice = createGenericSlice({\n  name: 'test',\n  initialState: { status: 'loading' } as GenericState<string>,\n  reducers: {\n    magic(state) {\n      state.status = 'finished'\n      state.data = 'hocus pocus'\n    }\n  }\n})\n")),Object(r.b)("h2",{id:"createasyncthunk"},Object(r.b)("inlineCode",{parentName:"h2"},"createAsyncThunk")),Object(r.b)("p",null,"In the most common use cases, you should not need to explicitly declare any types for the ",Object(r.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," call itself."),Object(r.b)("p",null,"Just provide a type for the first argument to the ",Object(r.b)("inlineCode",{parentName:"p"},"payloadCreator")," argument as you would for any function argument, and the resulting thunk will accept the same type as its input parameter.\nThe return type of the ",Object(r.b)("inlineCode",{parentName:"p"},"payloadCreator")," will also be reflected in all generated action types."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{8,11,18}","{8,11,18}":!0}),'interface MyData {\n  // ...\n}\n\nconst fetchUserById = createAsyncThunk(\n  \'users/fetchById\',\n  // Declare the type your function argument here:\n  async (userId: number) => {\n    const response = await fetch(`https://reqres.in/api/users/${userId}`)\n    // Inferred return type: Promise<MyData>\n    return (await response.json()) as MyData\n  }\n)\n\n// the parameter of `fetchUserById` is automatically inferred to `number` here\n// and dispatching the resulting thunkAction will return a Promise of a correctly\n// typed "fulfilled" or "rejected" action.\nconst lastReturnedAction = await store.dispatch(fetchUserById(3))\n')),Object(r.b)("p",null,"The second argument to the ",Object(r.b)("inlineCode",{parentName:"p"},"payloadCreator"),", known as ",Object(r.b)("inlineCode",{parentName:"p"},"thunkApi"),", is an object containing references to the ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch"),", ",Object(r.b)("inlineCode",{parentName:"p"},"getState"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"extra")," arguments from the thunk middleware as well as a utility function called ",Object(r.b)("inlineCode",{parentName:"p"},"rejectWithValue"),". If you want to use these from within the ",Object(r.b)("inlineCode",{parentName:"p"},"payloadCreator"),", you will need to define some generic arguments, as the types for these arguments cannot be inferred. Also, as TS cannot mix explicit and inferred generic parameters, from this point on you'll have to define the ",Object(r.b)("inlineCode",{parentName:"p"},"Returned")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ThunkArg")," generic parameter as well."),Object(r.b)("p",null,"To define the types for these arguments, pass an object as the third generic argument, with type declarations for some or all of these fields: ",Object(r.b)("inlineCode",{parentName:"p"},"{dispatch?, state?, extra?, rejectValue?}"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const fetchUserById = createAsyncThunk<\n  // Return type of the payload creator\n  MyData,\n  // First argument to the payload creator\n  number,\n  {\n    dispatch: AppDispatch\n    state: State\n    extra: {\n      jwt: string\n    }\n  }\n>('users/fetchById', async (userId, thunkApi) => {\n  const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`\n    }\n  })\n  return (await response.json()) as MyData\n})\n")),Object(r.b)("p",null,"If you are performing a request that you know will typically either be a success or have an expected error format, you can pass in a type to ",Object(r.b)("inlineCode",{parentName:"p"},"rejectValue")," and ",Object(r.b)("inlineCode",{parentName:"p"},"return rejectWithValue(knownPayload)")," in the action creator. This allows you to reference the error payload in the reducer as well as in a component after dispatching the ",Object(r.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," action."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface MyKnownError {\n  errorMessage: string\n  // ...\n}\ninterface UserAttributes {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n}\n\nconst updateUser = createAsyncThunk<\n  // Return type of the payload creator\n  MyData,\n  // First argument to the payload creator\n  UserAttributes,\n  // Types for ThunkAPI\n  {\n    extra: {\n      jwt: string\n    }\n    rejectValue: MyKnownError\n  }\n>('users/update', async (user, thunkApi) => {\n  const { id, ...userData } = user\n  const response = await fetch(`https://reqres.in/api/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`\n    },\n    body: JSON.stringify(userData)\n  })\n  if (response.status === 400) {\n    // Return the known error for future handling\n    return thunkApi.rejectWithValue((await response.json()) as MyKnownError)\n  }\n  return (await response.json()) as MyData\n})\n")),Object(r.b)("p",null,"While this notation for ",Object(r.b)("inlineCode",{parentName:"p"},"state"),", ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch"),", ",Object(r.b)("inlineCode",{parentName:"p"},"extra")," and ",Object(r.b)("inlineCode",{parentName:"p"},"rejectValue")," might seem uncommon at first, it allows you to provide only the types for these you actually need - so for example, if you are not accessing ",Object(r.b)("inlineCode",{parentName:"p"},"getState")," within your ",Object(r.b)("inlineCode",{parentName:"p"},"payloadCreator"),", there is no need to provide a type for ",Object(r.b)("inlineCode",{parentName:"p"},"state"),". The same can be said about ",Object(r.b)("inlineCode",{parentName:"p"},"rejectValue")," - if you don't need to access any potential error payload, you can ignore it."),Object(r.b)("p",null,"In addition, you can leverage checks against ",Object(r.b)("inlineCode",{parentName:"p"},"action.payload")," and ",Object(r.b)("inlineCode",{parentName:"p"},"match")," as provided by ",Object(r.b)("inlineCode",{parentName:"p"},"createAction")," as a type-guard for when you want to access known properties on defined types. Example:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"In a reducer")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    entities: {},\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(updateUser.fulfilled, (state, { payload }) => {\n      state.entities[payload.id] = payload\n    })\n    builder.addCase(updateUser.rejected, (state, action) => {\n      if (action.payload) {\n        // Since we passed in `MyKnownError` to `rejectType` in `updateUser`, the type information will be available here.\n        state.error = action.payload.errorMessage\n      } else {\n        state.error = action.error\n      }\n    })\n  }\n})\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"In a component")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const handleUpdateUser = async userData => {\n  const resultAction = await dispatch(updateUser(userData))\n  if (updateUser.fulfilled.match(resultAction)) {\n    const user = unwrapResult(resultAction)\n    showToast('success', `Updated ${user.name}`)\n  } else {\n    if (resultAction.payload) {\n      // Since we passed in `MyKnownError` to `rejectType` in `updateUser`, the type information will be available here.\n      // Note: this would also be a good place to do any handling that relies on the `rejectedWithValue` payload, such as setting field errors\n      showToast('error', `Update failed: ${resultAction.payload.errorMessage}`)\n    } else {\n      showToast('error', `Update failed: ${resultAction.error.message}`)\n    }\n  }\n}\n")),Object(r.b)("h2",{id:"createentityadapter"},Object(r.b)("inlineCode",{parentName:"h2"},"createEntityAdapter")),Object(r.b)("p",null,"Typing ",Object(r.b)("inlineCode",{parentName:"p"},"createEntityAdapter")," only requires you to specify the entity type as the single generic argument."),Object(r.b)("p",null,"The example from the ",Object(r.b)("inlineCode",{parentName:"p"},"createEntityAdapter")," documentation would look like this in TypeScript:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"{7}","{7}":!0}),"interface Book {\n  bookId: number\n  title: string\n  // ...\n}\n\nconst booksAdapter = createEntityAdapter<Book>({\n  selectId: book => book.bookId,\n  sortComparer: (a, b) => a.title.localeCompare(b.title)\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(),\n  reducers: {\n    bookAdded: booksAdapter.addOne,\n    booksReceived(state, action: PayloadAction<{ books: Book[] }>) {\n      booksAdapter.setAll(state, action.payload.books)\n    }\n  }\n})\n")),Object(r.b)("h3",{id:"using-createentityadapter-with-normalizr"},"Using ",Object(r.b)("inlineCode",{parentName:"h3"},"createEntityAdapter")," with ",Object(r.b)("inlineCode",{parentName:"h3"},"normalizr")),Object(r.b)("p",null,"When using a library like ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/paularmstrong/normalizr/"}),Object(r.b)("inlineCode",{parentName:"a"},"normalizr")),", your normalized data will resemble this shape:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  result: 1,\n  entities: {\n    1: { id: 1, other: 'property' },\n    2: { id: 2, other: 'property' }\n  }\n}\n")),Object(r.b)("p",null,"The methods ",Object(r.b)("inlineCode",{parentName:"p"},"addMany"),", ",Object(r.b)("inlineCode",{parentName:"p"},"upsertMany"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"setAll")," all allow you to pass in the ",Object(r.b)("inlineCode",{parentName:"p"},"entities")," portion of this directly with no extra conversion steps. However, the ",Object(r.b)("inlineCode",{parentName:"p"},"normalizr")," TS typings currently do not correctly reflect that multiple data types may be included in the results, so you will need to specify that type structure yourself."),Object(r.b)("p",null,"Here is an example of how that would look:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type Author = { id: number; name: string }\ntype Article = { id: number; title: string }\ntype Comment = { id: number; commenter: number }\n\nexport const fetchArticle = createAsyncThunk(\n  'articles/fetchArticle',\n  async (id: number) => {\n    const data = await fakeAPI.articles.show(id)\n    // Normalize the data so reducers can responded to a predictable payload.\n    // Note: at the time of writing, normalizr does not automatically infer the result,\n    // so we explicitly declare the shape of the returned normalized data as a generic arg.\n    const normalized = normalize<\n      any,\n      {\n        articles: { [key: string]: Article }\n        users: { [key: string]: Author }\n        comments: { [key: string]: Comment }\n      }\n    >(data, articleEntity)\n    return normalized.entities\n  }\n)\n\nexport const slice = createSlice({\n  name: 'articles',\n  initialState: articlesAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchArticle.fulfilled, (state, action) => {\n      // The type signature on action.payload matches what we passed into the generic for `normalize`, allowing us to access specific properties on `payload.articles` if desired\n      articlesAdapter.upsertMany(state, action.payload.articles)\n    })\n  }\n})\n")))}l.isMDXComponent=!0},118:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return y}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,y=u["".concat(o,".").concat(b)]||u[b]||d[b]||i;return n?r.a.createElement(y,c({ref:t},l,{components:n})):r.a.createElement(y,c({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},119:function(e,t,n){"use strict";e.exports=n(120)},120:function(e,t,n){"use strict";var a=n(121),r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,c=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,p=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.concurrent_mode"):60111,b=r?Symbol.for("react.forward_ref"):60112,y=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,f="function"==typeof Symbol&&Symbol.iterator;function g(e,t,n,a,r,i,o,c){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,a,r,i,o,c],l=0;(e=Error(t.replace(/%s/g,(function(){return s[l++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function j(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=0;a<t;a++)n+="&args[]="+encodeURIComponent(arguments[a+1]);g(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var O={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function N(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||O}function S(){}function v(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||O}N.prototype.isReactComponent={},N.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&j("85"),this.updater.enqueueSetState(this,e,t,"setState")},N.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=N.prototype;var C=v.prototype=new S;C.constructor=v,a(C,N.prototype),C.isPureReactComponent=!0;var k={current:null},A={current:null},T=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function R(e,t,n){var a=void 0,r={},o=null,c=null;if(null!=t)for(a in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(o=""+t.key),t)T.call(t,a)&&!x.hasOwnProperty(a)&&(r[a]=t[a]);var s=arguments.length-2;if(1===s)r.children=n;else if(1<s){for(var l=Array(s),p=0;p<s;p++)l[p]=arguments[p+2];r.children=l}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===r[a]&&(r[a]=s[a]);return{$$typeof:i,type:e,key:o,ref:c,props:r,_owner:A.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var I=/\/+/g,D=[];function U(e,t,n,a){if(D.length){var r=D.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=a,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:a,count:0}}function E(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>D.length&&D.push(e)}function M(e,t,n){return null==e?0:function e(t,n,a,r){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var s=!1;if(null===t)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case o:s=!0}}if(s)return a(r,t,""===n?"."+_(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var p=n+_(c=t[l],l);s+=e(c,p,a,r)}else if(null===t||"object"!=typeof t?p=null:p="function"==typeof(p=f&&t[f]||t["@@iterator"])?p:null,"function"==typeof p)for(t=p.call(t),l=0;!(c=t.next()).done;)s+=e(c=c.value,p=n+_(c,l++),a,r);else"object"===c&&j("31","[object Object]"===(a=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":a,"");return s}(e,"",t,n)}function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function $(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var a=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,a,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),a.push(e))}function B(e,t,n,a,r){var i="";null!=n&&(i=(""+n).replace(I,"$&/")+"/"),M(e,z,t=U(t,i,a,r)),E(t)}function G(){var e=k.current;return null===e&&j("321"),e}var V={Children:{map:function(e,t,n){if(null==e)return e;var a=[];return B(e,a,null,t,n),a},forEach:function(e,t,n){if(null==e)return e;M(e,$,t=U(null,null,t,n)),E(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return B(e,t,null,(function(e){return e})),t},only:function(e){return P(e)||j("143"),e}},createRef:function(){return{current:null}},Component:N,PureComponent:v,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:b,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return G().useCallback(e,t)},useContext:function(e,t){return G().useContext(e,t)},useEffect:function(e,t){return G().useEffect(e,t)},useImperativeHandle:function(e,t,n){return G().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return G().useLayoutEffect(e,t)},useMemo:function(e,t){return G().useMemo(e,t)},useReducer:function(e,t,n){return G().useReducer(e,t,n)},useRef:function(e){return G().useRef(e)},useState:function(e){return G().useState(e)},Fragment:c,StrictMode:s,Suspense:y,createElement:R,cloneElement:function(e,t,n){null==e&&j("267",e);var r=void 0,o=a({},e.props),c=e.key,s=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,l=A.current),void 0!==t.key&&(c=""+t.key);var p=void 0;for(r in e.type&&e.type.defaultProps&&(p=e.type.defaultProps),t)T.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=void 0===t[r]&&void 0!==p?p[r]:t[r])}if(1===(r=arguments.length-2))o.children=n;else if(1<r){p=Array(r);for(var u=0;u<r;u++)p[u]=arguments[u+2];o.children=p}return{$$typeof:i,type:e.type,key:c,ref:s,props:o,_owner:l}},createFactory:function(e){var t=R.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.8.6",unstable_ConcurrentMode:d,unstable_Profiler:l,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentOwner:A,assign:a}},W={default:V},q=W&&V||W;e.exports=q.default||q},121:function(e,t,n){"use strict";var a=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var a={};return"abcdefghijklmnopqrst".split("").forEach((function(e){a[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},a)).join("")}catch(r){return!1}}()?Object.assign:function(e,t){for(var n,c,s=o(e),l=1;l<arguments.length;l++){for(var p in n=Object(arguments[l]))r.call(n,p)&&(s[p]=n[p]);if(a){c=a(n);for(var u=0;u<c.length;u++)i.call(n,c[u])&&(s[c[u]]=n[c[u]])}}return s}}}]);